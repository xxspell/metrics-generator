name: 'GitHub Metrics Generator'
description: 'Generate GitHub metrics and commit them to repository'
author: 'hachimaru (74972395+xxspell@users.noreply.github.com)'

inputs:
  target_repository:
    description: 'Repository to commit metrics to (format: owner/repo)'
    required: true
  target_branch:
    description: 'Branch to commit to'
    required: false
    default: 'main'
  access_token:
    description: 'GitHub access token'
    required: true
  user_name:
    description: 'GitHub username to generate metrics for'
    required: true
  proxy:
    description: 'Proxy server (optional)'
    required: false
  excluded_repos:
    description: 'Comma-separated list of repositories to exclude (optional)'
    required: false
  comment_size:
    description: 'Size of comment block in cache file'
    required: false
    default: '7'
  git_user_name:
    description: 'Git commit author name'
    required: false
    default: 'GitHub Action'
  git_user_email:
    description: 'Git commit author email'
    required: false
    default: 'action@github.com'
  lastfm_token:
    description: 'API Token last.fm'
    required: true
  lastfm_user:
    description: 'Username last.fm'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout action repository
      uses: actions/checkout@v4
      with:
        repository: xxspell/metrics-generator
        fetch-depth: 0


    - name: Checkout target repository for file access
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.target_repository }}
        path: target-repo-temp
        token: ${{ inputs.access_token }}

    - name: Copy required files from target repository
      run: |
        if [ -d "target-repo-temp/cache" ]; then
          echo "=== DEBUG: Cache directory contents ==="
          ls -la target-repo-temp/cache/
        fi
        if [ -d "target-repo-temp/arts" ]; then
          echo "=== DEBUG: Arts directory contents ==="
          ls -la target-repo-temp/arts/
        fi

        # Copy cache directory if it exists
        if [ -d "target-repo-temp/cache" ]; then
          cp -r target-repo-temp/cache . || echo "No cache directory found"
        fi

        # Copy arts directory if it exists
        if [ -d "target-repo-temp/arts" ]; then
          cp -r target-repo-temp/arts . || echo "No arts directory found"
        fi

        # Copy SVG templates if they exist
        if [ -f "target-repo-temp/dark_mode.svg" ]; then
          cp target-repo-temp/dark_mode.svg . || echo "No dark_mode.svg found"
        fi

        if [ -f "target-repo-temp/light_mode.svg" ]; then
          cp target-repo-temp/light_mode.svg . || echo "No light_mode.svg found"
        fi

        # Create directories if they don't exist
        mkdir -p cache arts

      shell: bash

    - name: Set up Python environment
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync
      shell: bash

    - name: Run metrics generator
      run: uv run a.py
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        USER_NAME: ${{ inputs.user_name }}
        PROXY: ${{ inputs.proxy }}
        EXCLUDED_REPOS: ${{ inputs.excluded_repos }}
        LASTFM_TOKEN: ${{ inputs.lastfm_token }}
        LASTFM_USER: ${{ inputs.lastfm_user }}
      shell: bash

    - name: Commit updated files to target repository
      run: |
        cd target-repo-temp

        # Copy updated files back to target repository
        if [ -d "../cache" ]; then
          cp -r ../cache . || echo "No cache directory to copy back"
        fi

        if [ -d "../arts" ]; then
          cp -r ../arts . || echo "No arts directory to copy back"
        fi

        if [ -f "../dark_mode.svg" ]; then
          cp ../dark_mode.svg . || echo "No dark_mode.svg to copy back"
        fi

        if [ -f "../light_mode.svg" ]; then
          cp ../light_mode.svg . || echo "No light_mode.svg to copy back"
        fi


        # Check if there are any changes
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi


        # Configure git
        git config --local user.name "${{ inputs.git_user_name }}"
        git config --local user.email "${{ inputs.git_user_email }}"

        # Add and commit changes
        git add -A
        git commit -m "Update GitHub metrics [$(date)]" || echo "No changes to commit"
        git push origin ${{ inputs.target_branch }}
      shell: bash